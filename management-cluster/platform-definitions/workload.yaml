apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: workload
  namespace: platform-definitions
spec:
  schema:
    apiVersion: v1alpha1
    kind: Workload
    spec:
      name: string
      repository: string
      region: string
      kubernetesVersion: string | default="1.31.7"
      nodeSKU: string | default="standard_b2s_v2"
    status:
      # # Fields the controller will inject into instances status.
      # resourceGroupConditio: ${deployment.status.conditions}
      # availableReplicas: ${deployment.status.availableReplicas}

  # Define the resources this API will manage.
  resources:
    - id: resourceGroup
      template:
        apiVersion: resources.azure.com/v1api20200601
        kind: ResourceGroup
        metadata:
          name: ${schema.spec.name}-rg
        spec:
          location: ${schema.spec.region}

    - id: cluster
      template:
        apiVersion: containerservice.azure.com/v1api20240901
        kind: ManagedCluster
        metadata:
          name: ${schema.spec.name}-aks
        spec:
          location: "westeurope"
          nodeResourceGroup: ${schema.spec.name}-nodes-rg
          sku:
            name: "Base"
            tier: "Free"

          owner:
            name: "${schema.spec.name}-rg"

          dnsPrefix: "${schema.spec.name}-dns"
          
          kubernetesVersion: "${schema.spec.kubernetesVersion}"

          networkProfile:
            networkPlugin: azure
            networkPluginMode: overlay

          identity:
            type: SystemAssigned

          agentPoolProfiles:
            - name: nodepool1
              count: 1
              vmSize: "${schema.spec.nodeSKU}"
              osType: Linux
              mode: System
              availabilityZones:
                - "1"
                - "2"
                - "3"

    # - id: ingress
    #   includeWhen:
    #     - ${schema.spec.ingress.enabled} # Only include if the user wants to create an Ingress
    #   template:
    #     apiVersion: networking.k8s.io/v1
    #     kind: Ingress
    #     metadata:
    #       name: ${schema.spec.name}-ingress
    #       annotations:
    #         kubernetes.io/ingress.class: alb
    #         alb.ingress.kubernetes.io/scheme: internet-facing
    #         alb.ingress.kubernetes.io/target-type: ip
    #         alb.ingress.kubernetes.io/healthcheck-path: /health
    #         alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    #         alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60
    #     spec:
    #       rules:
    #         - http:
    #             paths:
    #               - path: "/"
    #                 pathType: Prefix
    #                 backend:
    #                   service:
    #                     name: ${service.metadata.name} # Use the service name
    #                     port:
    #                       number: 80